#include <stdio.h>
#include <stdlib.h>

// Define a structure for a stack
typedef struct {
    int* data;
    int top;
    int capacity;
} Stack;

// Initialize a stack
Stack* createStack(int capacity) {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->data = (int*)malloc(sizeof(int) * capacity);
    stack->top = -1;
    return stack;
}

// Check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Check if the stack is full
int isFull(Stack* stack) {
    return stack->top == stack->capacity - 1;
}

// Push an element onto the stack
void push(Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack is full. Cannot push.\n");
        return;
    }
    stack->data[++stack->top] = value;
}

// Pop an element from the stack
int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop.\n");
        return -1; // Return a sentinel value for an empty stack
    }
    return stack->data[stack->top--];
}

// Define a structure for the queue using two stacks
typedef struct {
    Stack* stack1; // Input stack for enqueue operation
    Stack* stack2; // Output stack for dequeue operation
} Queue;

// Initialize the queue
Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->stack1 = createStack(capacity);
    queue->stack2 = createStack(capacity);
    return queue;
}

// Enqueue operation: Push element to stack1
void enqueue(Queue* queue, int value) {
    push(queue->stack1, value);
}

// Dequeue operation: Pop element from stack2
int dequeue(Queue* queue) {
    if (isEmpty(queue->stack1) && isEmpty(queue->stack2)) {
        printf("Queue is empty.\n");
        return -1; // Return a sentinel value for an empty queue
    }

    if (isEmpty(queue->stack2)) {
        // Transfer elements from stack1 to stack2 in the required order
        while (!isEmpty(queue->stack1)) {
            int value = pop(queue->stack1);
            push(queue->stack2, value);
        }
    }

    return pop(queue->stack2);
}

// Check if the queue is empty
int isQueueEmpty(Queue* queue) {
    return isEmpty(queue->stack1) && isEmpty(queue->stack2);
}

int main() {
    Queue* queue = createQueue(10);

    // Enqueue some elements
    enqueue(queue, 1);
    enqueue(queue, 2);
    enqueue(queue, 3);

    // Dequeue elements
    printf("Dequeue: %d\n", dequeue(queue)); // Should print 1
    printf("Dequeue: %d\n", dequeue(queue)); // Should print 2

    // Enqueue more elements
    enqueue(queue, 4);
    enqueue(queue, 5);

    // Dequeue remaining elements
    while (!isQueueEmpty(queue)) {
        printf("Dequeue: %d\n", dequeue(queue));
    }

    // Try dequeuing from an empty queue
    printf("Dequeue: %d\n", dequeue(queue)); // Should print "Queue is empty."

    free(queue->stack1->data);
    free(queue->stack1);
    free(queue->stack2->data);
    free(queue->stack2);
    free(queue);

    return 0;
}
